!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	minirt.h	/^	A,$/;"	e	enum:e_material_type
BONUS	libft/Makefile	/^BONUS = ft_lstnew.c ft_lstadd_front.c ft_lstsize.c ft_lstlast.c \\$/;"	m
BONUS_SRCS	Makefile	/^BONUS_SRCS 	=	minirt.c vector.c$/;"	m
BUFFER_SIZE	libft/get_next_line.h	/^#  define BUFFER_SIZE /;"	d
C	minirt.h	/^	C,$/;"	e	enum:e_material_type
CAP	minirt.h	/^	CAP$/;"	e	enum:e_material_type
CC	Makefile	/^CC 			=	cc$/;"	m
CC	libft/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS 		=	-Wall -Wextra -Werror -g3 #-fsanitize=address$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CN	minirt.h	/^	CN,$/;"	e	enum:e_material_type
CY	minirt.h	/^	CY,$/;"	e	enum:e_material_type
EPSILON	minirt.h	/^# define EPSILON /;"	d
ERR_DATA_FILTER	mlx/mlx_png.c	/^#define	ERR_DATA_FILTER	/;"	d	file:
ERR_DATA_MISMATCH	mlx/mlx_png.c	/^#define	ERR_DATA_MISMATCH	/;"	d	file:
ERR_MAGIC_SIZE	mlx/mlx_png.c	/^#define	ERR_MAGIC_SIZE	/;"	d	file:
ERR_MAGIC_WRONG	mlx/mlx_png.c	/^#define	ERR_MAGIC_WRONG	/;"	d	file:
ERR_STRUCT_CRC	mlx/mlx_png.c	/^#define	ERR_STRUCT_CRC	/;"	d	file:
ERR_STRUCT_DAT	mlx/mlx_png.c	/^#define	ERR_STRUCT_DAT	/;"	d	file:
ERR_STRUCT_END	mlx/mlx_png.c	/^#define	ERR_STRUCT_END	/;"	d	file:
ERR_STRUCT_HDR	mlx/mlx_png.c	/^#define	ERR_STRUCT_HDR	/;"	d	file:
ERR_STRUCT_INCIMPL	mlx/mlx_png.c	/^#define	ERR_STRUCT_INCIMPL /;"	d	file:
ERR_STRUCT_INCOMPLETE	mlx/mlx_png.c	/^#define	ERR_STRUCT_INCOMPLETE	/;"	d	file:
ERR_STRUCT_MISSCHK	mlx/mlx_png.c	/^#define	ERR_STRUCT_MISSCHK	/;"	d	file:
ERR_ZLIB	mlx/mlx_png.c	/^#define	ERR_ZLIB	/;"	d	file:
EVENT_CLICK_EXIT	minirt.h	/^# define EVENT_CLICK_EXIT /;"	d
EVENT_KEY_PRESS	minirt.h	/^# define EVENT_KEY_PRESS /;"	d
EVENT_MOUSE_CLICK	minirt.h	/^# define EVENT_MOUSE_CLICK /;"	d
FALSE	minirt.h	/^# define FALSE /;"	d
FONT_HEIGHT	mlx/mlx_int.h	/^#define	FONT_HEIGHT	/;"	d
FONT_WIDTH	mlx/mlx_int.h	/^#define FONT_WIDTH	/;"	d
GET_NEXT_LINE_H	libft/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
IMG_H	minirt.h	/^# define IMG_H /;"	d
IMG_W	minirt.h	/^# define IMG_W /;"	d
KEY_A	minirt.h	/^# define KEY_A /;"	d
KEY_D	minirt.h	/^# define KEY_D /;"	d
KEY_DOWN	minirt.h	/^# define KEY_DOWN /;"	d
KEY_E	minirt.h	/^# define KEY_E /;"	d
KEY_ESC	minirt.h	/^# define KEY_ESC /;"	d
KEY_I	minirt.h	/^# define KEY_I /;"	d
KEY_LEFT	minirt.h	/^# define KEY_LEFT /;"	d
KEY_Q	minirt.h	/^# define KEY_Q /;"	d
KEY_R	minirt.h	/^# define KEY_R /;"	d
KEY_RIGHT	minirt.h	/^# define KEY_RIGHT /;"	d
KEY_S	minirt.h	/^# define KEY_S /;"	d
KEY_TAB	minirt.h	/^# define KEY_TAB /;"	d
KEY_UP	minirt.h	/^# define KEY_UP /;"	d
KEY_W	minirt.h	/^# define KEY_W /;"	d
L	minirt.h	/^	L,$/;"	e	enum:e_material_type
LIBFT_DIR	Makefile	/^LIBFT_DIR 	=	libft$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LUMEN	minirt.h	/^# define LUMEN /;"	d
MANDA_SRCS	Makefile	/^MANDA_SRCS 	=	minirt.c vector.c material.c utils.c object.c$/;"	m
MAX_EVENT	mlx/mlx_int.h	/^#define	MAX_EVENT	/;"	d
MAX_PIXEL_NB	mlx/mlx_int.h	/^#define MAX_PIXEL_NB	/;"	d
MINIRT_H	minirt.h	/^# define MINIRT_H$/;"	d
MLX_DIR	Makefile	/^MLX_DIR 	=	mlx$/;"	m
MLX_H	mlx/mlx.h	/^#define	MLX_H$/;"	d
NAME	Makefile	/^NAME		=	miniRT$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NOM	mlx/Makefile	/^NOM=libmlx.a$/;"	m
OBJ	mlx/Makefile	/^OBJ=$(OBJ1:.m=.o)$/;"	m
OBJ1	mlx/Makefile	/^OBJ1=$(SRC:.c=.o)$/;"	m
OBJS	Makefile	/^	OBJS = $(OBJS_BONUS)$/;"	m
OBJS	Makefile	/^	OBJS = $(OBJS_MANDA)$/;"	m
OBJS	libft/Makefile	/^	OBJS = $(OBJS_SRCS:.c=.o) $(BONUS:.c=.o)$/;"	m
OBJS	libft/Makefile	/^	OBJS = $(OBJS_SRCS:.c=.o)$/;"	m
OBJS_BONUS	Makefile	/^OBJS_BONUS	=	$(BONUS_SRCS:.c=.o)$/;"	m
OBJS_BONUS	libft/Makefile	/^OBJS_BONUS = $(BONUS:.c=.o)$/;"	m
OBJS_MANDA	Makefile	/^OBJS_MANDA 	=	$(MANDA_SRCS:.c=.o)$/;"	m
OBJS_SRCS	libft/Makefile	/^OBJS_SRCS = $(SRCS:.c=.o)$/;"	m
PL	minirt.h	/^	PL,$/;"	e	enum:e_material_type
PNG_HDR_SIZE	mlx/mlx_png.c	/^#define PNG_HDR_SIZE	/;"	d	file:
PNG_MAGIC_SIZE	mlx/mlx_png.c	/^#define	PNG_MAGIC_SIZE	/;"	d	file:
RETURN	mlx/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
RGB	minirt.h	/^# define RGB /;"	d
RM	Makefile	/^RM 			=	rm -rvf$/;"	m
SP	minirt.h	/^	SP,$/;"	e	enum:e_material_type
SRC	mlx/Makefile	/^SRC= mlx_shaders.c mlx_new_window.m mlx_init_loop.m mlx_new_image.m mlx_xpm.c mlx_int_str_to_wordtab.c$/;"	m
SRCS	libft/Makefile	/^SRCS = ft_memset.c ft_bzero.c ft_memcpy.c ft_memmove.c \\$/;"	m
TRUE	minirt.h	/^# define TRUE /;"	d
U	minirt.h	/^# define U /;"	d
UNIQ_BPP	mlx/mlx_int.h	/^#define UNIQ_BPP	/;"	d
UNIT	minirt.h	/^# define UNIT /;"	d
V	minirt.h	/^# define V /;"	d
WIN_H	minirt.h	/^# define WIN_H /;"	d
WIN_W	minirt.h	/^# define WIN_W /;"	d
X	minirt.h	/^# define X /;"	d
XYZ	minirt.h	/^# define XYZ /;"	d
Y	minirt.h	/^# define Y /;"	d
Z_CHUNK	mlx/mlx_png.c	/^#define	Z_CHUNK	/;"	d	file:
addr	minirt.h	/^	int		*addr;$/;"	m	struct:s_img
addr	minirt.h	/^	void			*addr;$/;"	m	struct:s_texture
albedo	minirt.h	/^	t_color			albedo;$/;"	m	struct:s_object
albedo	minirt.h	/^	t_vec		albedo;$/;"	m	struct:s_hit_record
ambient	minirt.h	/^    t_color			ambient;$/;"	m	struct:s_info
appid	mlx/mlx_int.h	/^  void			*appid;$/;"	m	struct:mlx_ptr_s
base_validation	libft/ft_atoi_base.c	/^static int	base_validation(char *b)$/;"	f	file:
bits_per_pixel	minirt.h	/^	int				bits_per_pixel;$/;"	m	struct:s_texture
bits_per_pixel	minirt.h	/^	int		bits_per_pixel;$/;"	m	struct:s_img
bpp	mlx/mlx_png.c	/^  int		bpp;$/;"	m	struct:png_info_s	file:
brightness	minirt.h	/^    double	brightness;$/;"	m	struct:s_light
buffer	mlx/mlx_int.h	/^  char			*buffer;$/;"	m	struct:mlx_img_list_s
bytes_per_pixel	mlx/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon1	file:
camera	minirt.h	/^    t_camera		*camera;$/;"	m	struct:s_info
camera_add	minirt.c	/^void    camera_add(t_camera **list, t_camera *new)$/;"	f
camera_init	minirt.c	/^t_camera    *camera_init(t_point coor, t_vec normal, int fov)$/;"	f
center	minirt.h	/^	t_point	center;$/;"	m	struct:s_cylinder
center	minirt.h	/^	t_point	center;$/;"	m	struct:s_plane
center	minirt.h	/^	t_point	center;$/;"	m	struct:s_sphere
check_format	minirt.c	/^int 	check_format(char *format)$/;"	f
check_sign	libft/ft_atoi.c	/^static int	check_sign(char c)$/;"	f	file:
check_space	libft/ft_atoi.c	/^static int	check_space(const char *str, int i)$/;"	f	file:
check_str	libft/ft_atoi_base.c	/^static int	check_str(char c, char *base)$/;"	f	file:
check_unit	utils.c	/^void	check_unit(double *x, double *y, double *z, int flag)$/;"	f
checkerboard_value	object.c	/^t_color	checkerboard_value(t_hit_record rec)$/;"	f
col	mlx/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	file:
color	minirt.h	/^	t_color			color;$/;"	m	struct:s_texture
color	mlx/mlx_png.c	/^  int		color;$/;"	m	struct:png_info_s	file:
color	mlx/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	file:
cone_init	material.c	/^t_cone	*cone_init(t_point center, double radius, double height, t_vec normal)$/;"	f
content	libft/get_next_line.h	/^	char			*content;$/;"	m	struct:s_list
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
convert_color	minirt.c	/^int	convert_color(t_vec clr)$/;"	f
count_str	libft/ft_split.c	/^static int	count_str(const char *str, char c)$/;"	f	file:
crc_table	mlx/mlx_png.c	/^unsigned long crc_table[256] = { 0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0xedb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x9b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x1db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x6b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0xf00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x86d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x3b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x4db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0xd6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0xa00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x5005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0xcb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0xbdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d };$/;"	v
cylinder_init	material.c	/^t_cylinder	*cylinder_init(t_point center, double radius, double height, t_vec normal)$/;"	f
depth	mlx/mlx_png.c	/^  int		depth;$/;"	m	struct:png_info_s	file:
dir	minirt.h	/^	t_vec	dir;$/;"	m	struct:s_ray
display_log	mlx/mlx_shaders.c	/^void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())$/;"	f
e_material_type	minirt.h	/^enum e_material_type$/;"	g
element	minirt.h	/^    void            *element;$/;"	m	struct:s_object
endian	minirt.h	/^	int				endian;$/;"	m	struct:s_texture
endian	minirt.h	/^	int		endian;$/;"	m	struct:s_img
fd	libft/get_next_line.h	/^	int				fd;$/;"	m	struct:s_list
file_name	minirt.h	/^	char			*file_name;$/;"	m	struct:s_texture
find_node	libft/get_next_line.c	/^t_list	*find_node(t_list **node, int fd)$/;"	f
focal_len	minirt.h	/^	double	focal_len;$/;"	m	struct:s_camera
font	mlx/mlx_int.h	/^  mlx_img_list_t	*font;$/;"	m	struct:mlx_ptr_s
font_atlas	mlx/font.c	/^} font_atlas = {$/;"	v	typeref:struct:__anon1	file:
font_fshader	mlx/mlx_int.h	/^  GLuint	font_fshader;$/;"	m	struct:glsl_info_s
font_program	mlx/mlx_int.h	/^  GLuint	font_program;$/;"	m	struct:glsl_info_s
font_vshader	mlx/mlx_int.h	/^  GLuint	font_vshader;$/;"	m	struct:glsl_info_s
fov	minirt.h	/^	int		fov;$/;"	m	struct:s_camera
front_face	minirt.h	/^    int			front_face;$/;"	m	struct:s_hit_record
ft_atod	utils.c	/^double	ft_atod(char *str)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi_base	libft/ft_atoi_base.c	/^int	ft_atoi_base(char *str, char *base)$/;"	f
ft_atovec	utils.c	/^t_vec	ft_atovec(char *str, int flag)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	*ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_ctoi	libft/ft_atoi_base.c	/^static int	ft_ctoi(char c, char *base)$/;"	f	file:
ft_draw	minirt.c	/^void ft_draw(t_info *info, t_mlx *mlx)$/;"	f
ft_intlen	libft/ft_itoa.c	/^static size_t	ft_intlen(int n)$/;"	f	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstnew	libft/get_next_line_utils.c	/^t_list	*ft_lstnew(int fd)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr	libft/ft_itoa.c	/^static void	ft_putnbr(char *arr, int n, size_t len)$/;"	f	file:
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(const char *str, char c)$/;"	f
ft_strcat	libft/ft_strjoin.c	/^static char	*ft_strcat(char *dest, char const *src)$/;"	f	file:
ft_strcat	libft/get_next_line_utils.c	/^char	*ft_strcat(char *dest, char const *src)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr	libft/get_next_line_utils.c	/^int	ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdup	libft/get_next_line_utils.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strerror	utils.c	/^void	ft_strerror(char *err)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin	libft/get_next_line_utils.c	/^char	*ft_strjoin(char *s1, char *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, char *src, size_t size)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
func_t	mlx/mlx_int.h	/^typedef int (*func_t)();$/;"	t
get_cap_point	minirt.c	/^t_point	get_cap_point(t_point center, double height, t_vec normal, double sign)$/;"	f
get_eof_line	libft/get_next_line.c	/^char	*get_eof_line(t_list **head, t_list **node)$/;"	f
get_next_line	libft/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_plane_uv	object.c	/^void	get_plane_uv(t_hit_record *rec, t_point center, double size)$/;"	f
glsl_info_s	mlx/mlx_int.h	/^typedef struct	glsl_info_s$/;"	s
glsl_info_t	mlx/mlx_int.h	/^} glsl_info_t;$/;"	t	typeref:struct:glsl_info_s
height	minirt.h	/^	double	height;$/;"	m	struct:s_cylinder
height	minirt.h	/^	int				height;$/;"	m	struct:s_texture
height	mlx/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon1	file:
height	mlx/mlx_int.h	/^  int			height;$/;"	m	struct:mlx_img_list_s
height	mlx/mlx_png.c	/^  unsigned int	height;$/;"	m	struct:png_info_s	file:
hit	object.c	/^int hit(t_object *obj, t_ray ray, t_hit_record *rec)$/;"	f
hit_cap	object.c	/^int	hit_cap(t_object *obj, t_ray ray, t_hit_record *rec)$/;"	f
hit_cone	object.c	/^int	hit_cone(t_object *obj, t_ray ray, t_hit_record *rec)   \/\/ our function$/;"	f
hit_cylinder	object.c	/^int	hit_cylinder(t_object *obj, t_ray ray, t_hit_record *rec)$/;"	f
hit_obj	object.c	/^int hit_obj(t_object *obj, t_ray ray, t_hit_record *rec)$/;"	f
hit_plane	object.c	/^int	hit_plane(t_object *obj, t_ray ray, t_hit_record *rec)$/;"	f
hit_sphere	object.c	/^int	hit_sphere(t_object *obj, t_ray ray, t_hit_record *rec)$/;"	f
horizontal	minirt.h	/^	t_vec	horizontal;$/;"	m	struct:s_camera
image	minirt.h	/^	void			*image;$/;"	m	struct:s_texture
image_fshader	mlx/mlx_int.h	/^  GLuint	image_fshader;$/;"	m	struct:glsl_info_s
image_program	mlx/mlx_int.h	/^  GLuint	image_program;$/;"	m	struct:glsl_info_s
image_vshader	mlx/mlx_int.h	/^  GLuint	image_vshader;$/;"	m	struct:glsl_info_s
img	minirt.h	/^	t_img		img;$/;"	m	struct:s_mlx
img	mlx/mlx_int.h	/^  mlx_img_list_t	*img;$/;"	m	struct:mlx_img_ctx_s
img_list	mlx/mlx_int.h	/^  mlx_img_ctx_t		*img_list;$/;"	m	struct:mlx_win_list_s
img_list	mlx/mlx_int.h	/^  mlx_img_list_t	*img_list;$/;"	m	struct:mlx_ptr_s
img_ptr	minirt.h	/^	void	*img_ptr;$/;"	m	struct:s_img
in_shadow	object.c	/^int in_shadow(t_object *objs, t_ray light_ray, double light_len)$/;"	f
info_init	minirt.c	/^t_info	info_init(t_info info, char *file)$/;"	f
interlace	mlx/mlx_png.c	/^  int		interlace;$/;"	m	struct:png_info_s	file:
is_set	libft/ft_strtrim.c	/^static int	is_set(char c, char const *set)$/;"	f	file:
is_sign	utils.c	/^void	is_sign(char *str, int *idx, double *sign)$/;"	f
key_press	minirt.c	/^int	key_press(int keycode, void *param)$/;"	f
light	minirt.h	/^    t_light			*light;$/;"	m	struct:s_info
light_add	minirt.c	/^void    light_add(t_light **list, t_light *new)$/;"	f
light_color	minirt.h	/^    t_vec	light_color;$/;"	m	struct:s_light
light_init	material.c	/^t_light     *light_init(t_vec light_origin, t_vec light_color, double brightness)$/;"	f
line_length	minirt.h	/^	int				line_length;$/;"	m	struct:s_texture
line_length	minirt.h	/^	int		line_length;$/;"	m	struct:s_img
loc_font_atlassize	mlx/mlx_int.h	/^  GLint		loc_font_atlassize;$/;"	m	struct:glsl_info_s
loc_font_color	mlx/mlx_int.h	/^  GLint		loc_font_color;$/;"	m	struct:glsl_info_s
loc_font_posinatlas	mlx/mlx_int.h	/^  GLint		loc_font_posinatlas;$/;"	m	struct:glsl_info_s
loc_font_posinwin	mlx/mlx_int.h	/^  GLint		loc_font_posinwin;$/;"	m	struct:glsl_info_s
loc_font_position	mlx/mlx_int.h	/^  GLint		loc_font_position;$/;"	m	struct:glsl_info_s
loc_font_texture	mlx/mlx_int.h	/^  GLint		loc_font_texture;$/;"	m	struct:glsl_info_s
loc_font_winhalfsize	mlx/mlx_int.h	/^  GLint		loc_font_winhalfsize;$/;"	m	struct:glsl_info_s
loc_image_pos	mlx/mlx_int.h	/^  GLint		loc_image_pos;$/;"	m	struct:glsl_info_s
loc_image_position	mlx/mlx_int.h	/^  GLint		loc_image_position;$/;"	m	struct:glsl_info_s
loc_image_size	mlx/mlx_int.h	/^  GLint		loc_image_size;$/;"	m	struct:glsl_info_s
loc_image_texture	mlx/mlx_int.h	/^  GLint		loc_image_texture;$/;"	m	struct:glsl_info_s
loc_image_winhalfsize	mlx/mlx_int.h	/^  GLint		loc_image_winhalfsize;$/;"	m	struct:glsl_info_s
loc_pixel_position	mlx/mlx_int.h	/^  GLint		loc_pixel_position;$/;"	m	struct:glsl_info_s
loc_pixel_texture	mlx/mlx_int.h	/^  GLint		loc_pixel_texture;$/;"	m	struct:glsl_info_s
loc_pixel_winhalfsize	mlx/mlx_int.h	/^  GLint		loc_pixel_winhalfsize;$/;"	m	struct:glsl_info_s
loop_hook	mlx/mlx_int.h	/^  void			(*loop_hook)(void *);$/;"	m	struct:mlx_ptr_s
loop_hook_data	mlx/mlx_int.h	/^  void			*loop_hook_data;$/;"	m	struct:mlx_ptr_s
loop_timer	mlx/mlx_int.h	/^  void			*loop_timer;$/;"	m	struct:mlx_ptr_s
lstclear	libft/get_next_line.c	/^void	lstclear(t_list **keep, t_list **node)$/;"	f
magic	mlx/mlx_png.c	/^unsigned char magic[PNG_MAGIC_SIZE] = {137, 80, 78, 71, 13, 10, 26, 10};$/;"	v
main	minirt.c	/^int main(int argc, char **argv)$/;"	f
main_loop	minirt.c	/^void	main_loop(t_info *info, t_mlx *mlx, int key)$/;"	f
main_loop_active	mlx/mlx_int.h	/^  int			main_loop_active;$/;"	m	struct:mlx_ptr_s
make_arr	libft/ft_split.c	/^static int	make_arr(const char *str, char c, char **arr)$/;"	f	file:
mipng_crc	mlx/mlx_png.c	/^int	mipng_crc(unsigned char *ptr, int len)$/;"	f
mipng_data	mlx/mlx_png.c	/^int	mipng_data(mlx_img_list_t *img, unsigned char *dat, png_info_t *pi)$/;"	f
mipng_defilter	mlx/mlx_png.c	/^unsigned char (*(mipng_defilter[]))(unsigned char *buff, int pos, int a, int b, int c) =$/;"	v
mipng_defilter_average	mlx/mlx_png.c	/^unsigned char mipng_defilter_average(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_none	mlx/mlx_png.c	/^unsigned char mipng_defilter_none(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_paeth	mlx/mlx_png.c	/^unsigned char mipng_defilter_paeth(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_sub	mlx/mlx_png.c	/^unsigned char mipng_defilter_sub(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_up	mlx/mlx_png.c	/^unsigned char mipng_defilter_up(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_err	mlx/mlx_png.c	/^char *(mipng_err[]) =$/;"	v
mipng_fill_img	mlx/mlx_png.c	/^int	mipng_fill_img(mlx_img_list_t *img, unsigned char *buf, png_info_t *pi)$/;"	f
mipng_is_type	mlx/mlx_png.c	/^int	mipng_is_type(unsigned char *ptr, char *type)$/;"	f
mipng_magic	mlx/mlx_png.c	/^int	mipng_magic(unsigned char *ptr, int size)$/;"	f
mipng_structure	mlx/mlx_png.c	/^int	mipng_structure(unsigned char *ptr, int size, unsigned char **hdr, unsigned char **dat)$/;"	f
mipng_verif_hdr	mlx/mlx_png.c	/^int	mipng_verif_hdr(unsigned char *hdr, png_info_t *pi)$/;"	f
mlx	minirt.h	/^	t_mlx			*mlx;$/;"	m	struct:s_info
mlx_col_name	mlx/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_img_ctx_s	mlx/mlx_int.h	/^typedef struct	mlx_img_ctx_s$/;"	s
mlx_img_ctx_t	mlx/mlx_int.h	/^} mlx_img_ctx_t;$/;"	t	typeref:struct:mlx_img_ctx_s
mlx_img_list_s	mlx/mlx_int.h	/^typedef struct	mlx_img_list_s$/;"	s
mlx_img_list_t	mlx/mlx_int.h	/^} mlx_img_list_t;$/;"	t	typeref:struct:mlx_img_list_s
mlx_int_file_get_rid_comment	mlx/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	mlx/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_line	mlx/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	mlx/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_parse_png	mlx/mlx_png.c	/^mlx_img_list_t	*mlx_int_parse_png(mlx_ptr_t *xvar, unsigned char *fptr, int size)$/;"	f
mlx_int_parse_xpm	mlx/mlx_xpm.c	/^void	*mlx_int_parse_xpm(mlx_ptr_t *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_static_line	mlx/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	mlx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	mlx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	mlx/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_xpm_set_pixel	mlx/mlx_xpm.c	/^void	mlx_int_xpm_set_pixel(mlx_img_list_t *img, char *data, int opp, int col, int x)$/;"	f
mlx_png_file_to_image	mlx/mlx_png.c	/^void	*mlx_png_file_to_image(mlx_ptr_t *xvar, char *file, int *width, int *height)$/;"	f
mlx_ptr_s	mlx/mlx_int.h	/^typedef struct		mlx_ptr_s$/;"	s
mlx_ptr_t	mlx/mlx_int.h	/^} mlx_ptr_t;$/;"	t	typeref:struct:mlx_ptr_s
mlx_shaders	mlx/mlx_shaders.c	/^int mlx_shaders(glsl_info_t *glsl)$/;"	f
mlx_shaders_font	mlx/mlx_shaders.c	/^int mlx_shaders_font(glsl_info_t *glsl)$/;"	f
mlx_shaders_image	mlx/mlx_shaders.c	/^int mlx_shaders_image(glsl_info_t *glsl)$/;"	f
mlx_shaders_pixel	mlx/mlx_shaders.c	/^int mlx_shaders_pixel(glsl_info_t *glsl)$/;"	f
mlx_win_list_s	mlx/mlx_int.h	/^typedef struct	mlx_win_list_s$/;"	s
mlx_win_list_t	mlx/mlx_int.h	/^} mlx_win_list_t;$/;"	t	typeref:struct:mlx_win_list_s
mlx_xpm_file_to_image	mlx/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(mlx_ptr_t *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	mlx/mlx_xpm.c	/^void	*mlx_xpm_to_image(mlx_ptr_t *xvar,char **xpm_data,int *width,int *height)$/;"	f
my_mlx_pixel_put	minirt.c	/^void  my_mlx_pixel_put(t_img *img, int x, int y, t_color color)$/;"	f
name	mlx/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	file:
name	mlx/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	file:
nb_flush	mlx/mlx_int.h	/^  int			nb_flush;$/;"	m	struct:mlx_win_list_s
next	libft/get_next_line.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	minirt.h	/^	void	*next;$/;"	m	struct:s_light
next	minirt.h	/^	void            *next;$/;"	m	struct:s_camera
next	minirt.h	/^    void            *next;$/;"	m	struct:s_object
next	mlx/mlx_int.h	/^  struct mlx_img_ctx_s	*next;$/;"	m	struct:mlx_img_ctx_s	typeref:struct:mlx_img_ctx_s::mlx_img_ctx_s
next	mlx/mlx_int.h	/^  struct mlx_img_list_s	*next;$/;"	m	struct:mlx_img_list_s	typeref:struct:mlx_img_list_s::mlx_img_list_s
next	mlx/mlx_int.h	/^  struct mlx_win_list_s	*next;$/;"	m	struct:mlx_win_list_s	typeref:struct:mlx_win_list_s::mlx_win_list_s
normal	minirt.h	/^	t_vec	normal;$/;"	m	struct:s_camera
normal	minirt.h	/^	t_vec	normal;$/;"	m	struct:s_cylinder
normal	minirt.h	/^	t_vec	normal;$/;"	m	struct:s_plane
normal	minirt.h	/^    t_vec		normal;$/;"	m	struct:s_hit_record
num_count	libft/ft_atoi.c	/^static int	num_count(const char *str, int i, int sign)$/;"	f	file:
obj	minirt.h	/^    t_object		*obj;$/;"	m	struct:s_info
obj_add	minirt.c	/^void    obj_add(t_object **list, t_object *new)$/;"	f
object_init	material.c	/^t_object    *object_init(t_object_type type, void *element, t_vec albedo)$/;"	f
orig	minirt.h	/^	t_point	orig;$/;"	m	struct:s_camera
orig	minirt.h	/^	t_point	orig;$/;"	m	struct:s_ray
origin	minirt.h	/^    t_vec	origin;$/;"	m	struct:s_light
p	minirt.h	/^    t_point		p;$/;"	m	struct:s_hit_record
phong_lighting	object.c	/^t_vec	phong_lighting(t_info *info)$/;"	f
pixel_data	mlx/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon1	file:
pixel_fshader	mlx/mlx_int.h	/^  GLuint	pixel_fshader;$/;"	m	struct:glsl_info_s
pixel_program	mlx/mlx_int.h	/^  GLuint	pixel_program;$/;"	m	struct:glsl_info_s
pixel_vshader	mlx/mlx_int.h	/^  GLuint	pixel_vshader;$/;"	m	struct:glsl_info_s
pixmgt	mlx/mlx_int.h	/^  int			pixmgt;$/;"	m	struct:mlx_win_list_s
plane_init	material.c	/^t_plane	*plane_init(t_point center, t_vec normal, double radius)$/;"	f
png_info_s	mlx/mlx_png.c	/^typedef struct png_info_s$/;"	s	file:
png_info_t	mlx/mlx_png.c	/^} png_info_t;$/;"	t	typeref:struct:png_info_s	file:
point_light_get	object.c	/^t_vec        point_light_get(t_info *info, t_light *light)$/;"	f
print_cam	minirt.c	/^void	print_cam(t_camera *cam) \/\/ 지워야함$/;"	f
print_obj	minirt.c	/^void	print_obj(t_object *obj) \/\/ 지워야함$/;"	f
ptr	minirt.h	/^	void		*ptr;$/;"	m	struct:s_mlx
put_a	minirt.c	/^void	put_a(t_info *info, char **argv)$/;"	f
put_c	minirt.c	/^void	put_c(t_info *info, char **argv)$/;"	f
put_cn	minirt.c	/^void	put_cn(t_info *info, char **argv)$/;"	f
put_cy	minirt.c	/^void	put_cy(t_info *info, char **argv)$/;"	f
put_info	minirt.c	/^void	put_info(t_info *info, char **argv)$/;"	f
put_l	minirt.c	/^void	put_l(t_info *info, char **argv)$/;"	f
put_nbr	libft/ft_atoi_base.c	/^static int	put_nbr(char *str, int i, int sign, char *base)$/;"	f	file:
put_pl	minirt.c	/^void	put_pl(t_info *info, char **argv)$/;"	f
put_sp	minirt.c	/^void	put_sp(t_info *info, char **argv)$/;"	f
put_str	libft/ft_split.c	/^static size_t	put_str(char **arr, const char *str, char c, size_t cnt)$/;"	f	file:
radius	minirt.h	/^	double	radius;$/;"	m	struct:s_cylinder
radius	minirt.h	/^	double	radius;$/;"	m	struct:s_plane
radius	minirt.h	/^	double	radius;$/;"	m	struct:s_sphere
radius2	minirt.h	/^	double	radius2;$/;"	m	struct:s_cylinder
radius2	minirt.h	/^	double	radius2;$/;"	m	struct:s_sphere
ray	minirt.h	/^    t_ray			ray;$/;"	m	struct:s_info
ray_at	object.c	/^t_point	ray_at(t_ray ray, double t)$/;"	f
ray_color	minirt.c	/^t_color    ray_color(t_info *info)$/;"	f
ray_init	minirt.c	/^t_ray	ray_init(t_point orig, t_vec dir)$/;"	f
ray_primary	minirt.c	/^t_ray	ray_primary(t_camera *cam, double u, double v)$/;"	f
rec	minirt.h	/^    t_hit_record	rec;$/;"	m	struct:s_info
record_init	object.c	/^void record_init(t_hit_record *rec)$/;"	f
reflect	object.c	/^t_vec          reflect(t_vec v, t_vec n)$/;"	f
s_camera	minirt.h	/^typedef struct s_camera$/;"	s
s_col_name	mlx/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_cylinder	minirt.h	/^typedef struct s_cylinder$/;"	s
s_hit_record	minirt.h	/^typedef struct s_hit_record$/;"	s
s_img	minirt.h	/^typedef struct  s_img$/;"	s
s_info	minirt.h	/^typedef struct s_info$/;"	s
s_light	minirt.h	/^typedef struct  s_light$/;"	s
s_list	libft/get_next_line.h	/^typedef struct s_list$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_mlx	minirt.h	/^typedef struct	s_mlx$/;"	s
s_object	minirt.h	/^typedef struct  s_object$/;"	s
s_plane	minirt.h	/^typedef struct s_plane$/;"	s
s_ray	minirt.h	/^typedef struct s_ray$/;"	s
s_sphere	minirt.h	/^typedef struct s_sphere$/;"	s
s_texture	minirt.h	/^typedef struct s_texture$/;"	s
s_vec	minirt.h	/^typedef struct s_vec$/;"	s
s_xpm_col	mlx/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
set_face_normal	minirt.c	/^void    set_face_normal(t_ray ray, t_hit_record *rec)$/;"	f
sphere_init	material.c	/^t_sphere	*sphere_init(t_point center, double radius)$/;"	f
split_free	utils.c	/^void	split_free(char **split)$/;"	f
start_point	minirt.h	/^	t_point	start_point;$/;"	m	struct:s_camera
t	minirt.h	/^    double		t;$/;"	m	struct:s_hit_record
t_camera	minirt.h	/^}			    t_camera;$/;"	t	typeref:struct:s_camera
t_color	minirt.h	/^typedef t_vec	t_color;$/;"	t
t_cone	minirt.h	/^typedef t_cylinder	t_cone;$/;"	t
t_cylinder	minirt.h	/^}			t_cylinder;$/;"	t	typeref:struct:s_cylinder
t_hit_record	minirt.h	/^}				t_hit_record;$/;"	t	typeref:struct:s_hit_record
t_img	minirt.h	/^}			t_img;$/;"	t	typeref:struct:s_img
t_info	minirt.h	/^}					t_info;$/;"	t	typeref:struct:s_info
t_light	minirt.h	/^}			t_light;$/;"	t	typeref:struct:s_light
t_list	libft/get_next_line.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_list	libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_mlx	minirt.h	/^}			t_mlx;$/;"	t	typeref:struct:s_mlx
t_object	minirt.h	/^}                   t_object;$/;"	t	typeref:struct:s_object
t_object_type	minirt.h	/^typedef int t_object_type;$/;"	t
t_plane	minirt.h	/^}			t_plane;$/;"	t	typeref:struct:s_plane
t_point	minirt.h	/^typedef t_vec	t_point;$/;"	t
t_ray	minirt.h	/^}			t_ray;$/;"	t	typeref:struct:s_ray
t_sphere	minirt.h	/^}			t_sphere;$/;"	t	typeref:struct:s_sphere
t_texture	minirt.h	/^}	t_texture;$/;"	t	typeref:struct:s_texture
t_vec	minirt.h	/^}		    t_vec;$/;"	t	typeref:struct:s_vec
t_xpm_col	mlx/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
texture	minirt.h	/^	t_texture	texture;$/;"	m	struct:s_mlx
texture	mlx/mlx_int.h	/^  GLuint		texture;$/;"	m	struct:mlx_img_ctx_s
tmax	minirt.h	/^    double		tmax;$/;"	m	struct:s_hit_record
tmin	minirt.h	/^    double		tmin;$/;"	m	struct:s_hit_record
trim_line	libft/get_next_line.c	/^char	*trim_line(char **keep)$/;"	f
type	minirt.h	/^	int				type;$/;"	m	struct:s_texture
type	minirt.h	/^    t_object_type   type;$/;"	m	struct:s_object
u	minirt.h	/^	double		u;$/;"	m	struct:s_hit_record
v	minirt.h	/^	double		v;$/;"	m	struct:s_hit_record
vbuffer	mlx/mlx_int.h	/^  GLuint		vbuffer;$/;"	m	struct:mlx_img_ctx_s
vec_add	vector.c	/^t_vec	vec_add(t_vec u, t_vec v)$/;"	f
vec_cross	vector.c	/^t_vec	vec_cross(t_vec u, t_vec v)$/;"	f
vec_div	vector.c	/^t_vec	vec_div(t_vec u, t_vec v)$/;"	f
vec_div_double	vector.c	/^t_vec	vec_div_double(t_vec u, double n)$/;"	f
vec_dot	vector.c	/^double	vec_dot(t_vec u, t_vec v)$/;"	f
vec_init	vector.c	/^t_vec	vec_init(double x, double y, double z)$/;"	f
vec_len	vector.c	/^double	vec_len(t_vec u)$/;"	f
vec_len_sqr	vector.c	/^double	vec_len_sqr(t_vec u)$/;"	f
vec_min	vector.c	/^t_vec  vec_min(t_vec vec1, t_vec vec2)$/;"	f
vec_multi	vector.c	/^t_vec	vec_multi(t_vec u, t_vec v)$/;"	f
vec_multi_double	vector.c	/^t_vec	vec_multi_double(t_vec u, double n)$/;"	f
vec_sub	vector.c	/^t_vec	vec_sub(t_vec u, t_vec v)$/;"	f
vec_unit	vector.c	/^t_vec	vec_unit(t_vec u)$/;"	f
vertexes	mlx/mlx_int.h	/^  GLfloat		vertexes[8];$/;"	m	struct:mlx_img_list_s
vertical	minirt.h	/^	t_vec	vertical;$/;"	m	struct:s_camera
viewport_h	minirt.h	/^	double	viewport_h;$/;"	m	struct:s_camera
viewport_w	minirt.h	/^	double	viewport_w;$/;"	m	struct:s_camera
width	minirt.h	/^	int				width;$/;"	m	struct:s_texture
width	mlx/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon1	file:
width	mlx/mlx_int.h	/^  int			width;$/;"	m	struct:mlx_img_list_s
width	mlx/mlx_png.c	/^  unsigned int	width;$/;"	m	struct:png_info_s	file:
win	minirt.h	/^	void		*win;$/;"	m	struct:s_mlx
win_list	mlx/mlx_int.h	/^  mlx_win_list_t	*win_list;$/;"	m	struct:mlx_ptr_s
winid	mlx/mlx_int.h	/^  void			*winid;$/;"	m	struct:mlx_win_list_s
x	minirt.h	/^	double	x;$/;"	m	struct:s_vec
y	minirt.h	/^	double	y;$/;"	m	struct:s_vec
z	minirt.h	/^	double	z;$/;"	m	struct:s_vec
